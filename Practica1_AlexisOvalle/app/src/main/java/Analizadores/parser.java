
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import GUI.*;
import Reportes.ReporteErrores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\002\000\002\003\006" +
    "\000\002\004\007\000\002\004\011\000\002\004\011\000" +
    "\002\004\011\000\002\004\002\000\002\005\006\000\002" +
    "\006\007\000\002\006\007\000\002\006\011\000\002\006" +
    "\011\000\002\006\007\000\002\006\011\000\002\006\007" +
    "\000\002\006\002\000\002\010\005\000\002\010\003\000" +
    "\002\011\005\000\002\011\003\000\002\007\011\000\002" +
    "\007\007\000\002\015\003\000\002\015\003\000\002\014" +
    "\003\000\002\014\003\000\002\013\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\012\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\010\002\ufffd\004\006\022\005\001\002\000" +
    "\004\002\171\001\002\000\004\025\163\001\002\000\006" +
    "\007\011\010\012\001\002\000\010\002\ufffd\004\006\022" +
    "\005\001\002\000\010\002\ufffd\004\006\022\005\001\002" +
    "\000\004\027\124\001\002\000\004\027\013\001\002\000" +
    "\022\011\015\014\021\015\017\016\016\017\022\020\020" +
    "\021\014\030\uffee\001\002\000\004\005\120\001\002\000" +
    "\004\005\114\001\002\000\004\005\077\001\002\000\004" +
    "\005\066\001\002\000\004\005\044\001\002\000\004\005" +
    "\033\001\002\000\004\005\025\001\002\000\004\030\024" +
    "\001\002\000\010\002\ufff6\004\ufff6\022\ufff6\001\002\000" +
    "\006\045\027\046\026\001\002\000\004\006\uffe7\001\002" +
    "\000\004\006\uffe6\001\002\000\004\006\031\001\002\000" +
    "\022\011\015\014\021\015\017\016\016\017\022\020\020" +
    "\021\014\030\uffee\001\002\000\004\030\ufff4\001\002\000" +
    "\004\031\034\001\002\000\004\044\036\001\002\000\004" +
    "\032\041\001\002\000\006\032\uffec\034\037\001\002\000" +
    "\004\044\036\001\002\000\004\032\uffed\001\002\000\004" +
    "\006\042\001\002\000\022\011\015\014\021\015\017\016" +
    "\016\017\022\020\020\021\014\030\uffee\001\002\000\004" +
    "\030\ufff3\001\002\000\010\025\050\042\046\043\051\001" +
    "\002\000\024\006\uffe3\026\uffe3\030\uffe3\032\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\001\002\000\024\006" +
    "\uffe5\026\uffe5\030\uffe5\032\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\001\002\000\014\006\064\035\055\036" +
    "\054\037\053\040\057\001\002\000\010\025\050\042\046" +
    "\043\051\001\002\000\024\006\uffe4\026\uffe4\030\uffe4\032" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\001\002" +
    "\000\014\026\056\035\055\036\054\037\053\040\057\001" +
    "\002\000\010\025\050\042\046\043\051\001\002\000\010" +
    "\025\050\042\046\043\051\001\002\000\010\025\050\042" +
    "\046\043\051\001\002\000\024\006\uffde\026\uffde\030\uffde" +
    "\032\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\001" +
    "\002\000\010\025\050\042\046\043\051\001\002\000\024" +
    "\006\uffdf\026\uffdf\030\uffdf\032\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\001\002\000\024\006\uffe2\026\uffe2" +
    "\030\uffe2\032\uffe2\034\uffe2\035\uffe2\036\uffe2\037\053\040" +
    "\057\001\002\000\024\006\uffe1\026\uffe1\030\uffe1\032\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\053\040\057\001\002\000" +
    "\024\006\uffe0\026\uffe0\030\uffe0\032\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\001\002\000\022\011\015\014" +
    "\021\015\017\016\016\017\022\020\020\021\014\030\uffee" +
    "\001\002\000\004\030\ufff1\001\002\000\004\031\067\001" +
    "\002\000\010\025\050\042\046\043\051\001\002\000\004" +
    "\032\074\001\002\000\016\032\uffea\034\072\035\055\036" +
    "\054\037\053\040\057\001\002\000\010\025\050\042\046" +
    "\043\051\001\002\000\004\032\uffeb\001\002\000\004\006" +
    "\075\001\002\000\022\011\015\014\021\015\017\016\016" +
    "\017\022\020\020\021\014\030\uffee\001\002\000\004\030" +
    "\ufff2\001\002\000\004\031\100\001\002\000\004\027\102" +
    "\001\002\000\004\032\111\001\002\000\010\025\050\042" +
    "\046\043\051\001\002\000\014\034\104\035\055\036\054" +
    "\037\053\040\057\001\002\000\010\025\050\042\046\043" +
    "\051\001\002\000\014\030\106\035\055\036\054\037\053" +
    "\040\057\001\002\000\006\032\uffe8\034\107\001\002\000" +
    "\004\027\102\001\002\000\004\032\uffe9\001\002\000\004" +
    "\006\112\001\002\000\022\011\015\014\021\015\017\016" +
    "\016\017\022\020\020\021\014\030\uffee\001\002\000\004" +
    "\030\ufff0\001\002\000\004\044\115\001\002\000\004\006" +
    "\116\001\002\000\022\011\015\014\021\015\017\016\016" +
    "\017\022\020\020\021\014\030\uffee\001\002\000\004\030" +
    "\ufff5\001\002\000\004\044\121\001\002\000\004\006\122" +
    "\001\002\000\022\011\015\014\021\015\017\016\016\017" +
    "\022\020\020\021\014\030\uffee\001\002\000\004\030\uffef" +
    "\001\002\000\014\011\125\012\131\013\130\016\126\030" +
    "\ufff7\001\002\000\004\005\155\001\002\000\004\005\147" +
    "\001\002\000\004\030\146\001\002\000\004\005\140\001" +
    "\002\000\004\005\132\001\002\000\004\031\133\001\002" +
    "\000\004\044\036\001\002\000\004\032\135\001\002\000" +
    "\004\006\136\001\002\000\014\011\125\012\131\013\130" +
    "\016\126\030\ufff7\001\002\000\004\030\ufffa\001\002\000" +
    "\004\031\141\001\002\000\010\025\050\042\046\043\051" +
    "\001\002\000\004\032\143\001\002\000\004\006\144\001" +
    "\002\000\014\011\125\012\131\013\130\016\126\030\ufff7" +
    "\001\002\000\004\030\ufff9\001\002\000\010\002\ufffc\004" +
    "\ufffc\022\ufffc\001\002\000\004\031\150\001\002\000\004" +
    "\027\102\001\002\000\004\032\152\001\002\000\004\006" +
    "\153\001\002\000\014\011\125\012\131\013\130\016\126" +
    "\030\ufff7\001\002\000\004\030\ufff8\001\002\000\004\044" +
    "\156\001\002\000\004\006\157\001\002\000\014\011\125" +
    "\012\131\013\130\016\126\030\ufff7\001\002\000\004\030" +
    "\ufffb\001\002\000\004\002\uffff\001\002\000\004\002\000" +
    "\001\002\000\004\044\166\001\002\000\010\002\ufffd\004" +
    "\006\022\005\001\002\000\004\002\ufffe\001\002\000\004" +
    "\026\167\001\002\000\004\006\170\001\002\000\010\002" +
    "\uffdd\004\uffdd\022\uffdd\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\012\163\001\001\000\006\003\006\005\007\001\001" +
    "\000\004\002\161\001\001\000\004\002\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\042\001\001\000\002" +
    "\001\001\000\006\013\046\014\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\051" +
    "\014\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\062\014\044\001\001\000\006\013\061\014\044" +
    "\001\001\000\006\013\060\014\044\001\001\000\002\001" +
    "\001\000\006\013\057\014\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\067\013\070\014\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\072\013\070\014\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\100\001\001\000\002\001\001\000\006\013\102\014" +
    "\044\001\001\000\002\001\001\000\006\013\104\014\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\122\001" +
    "\001\000\002\001\001\000\004\004\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\141\013\070\014\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public parser(AnalizadorLexico lexer) {
            super(lexer);
    }
    public void syntax_error(Symbol s) {
            tabla.agregarError(String.valueOf(s.value), s.left, s.right, "ERRORLEXICO");
        }

    private ReporteErrores tabla = new ReporteErrores();
    private GeneracionGraficas graficas = new GeneracionGraficas();

    public void setTabla(ReporteErrores tabla){
            this.tabla = tabla;
    }



    public void setGraficas(GeneracionGraficas graficas){
                this.graficas = graficas;
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= DEFINICIONES sBarras s 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= DEFINICIONES sPie s 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s ::= EJECUTAR sEjecutar s 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sBarras ::= BARRA LLAVESABIERTO sBarrasSintaxis LLAVESCERRADO 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 graficas.agregarGrafica(1, bleft, bright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sBarras",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sBarrasSintaxis ::= TITULO DOSPUNTO CADENAS PUNTOCOMA sBarrasSintaxis 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 graficas.ingresodeTextoGrafica(c, 1, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sBarrasSintaxis",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sBarrasSintaxis ::= EJEX DOSPUNTO CORCHETESABIERTO sEjexSintaxis CORCHETESCERRADO PUNTOCOMA sBarrasSintaxis 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		graficas.ingresoCadena(1,xleft,xright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sBarrasSintaxis",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sBarrasSintaxis ::= EJEY DOSPUNTO CORCHETESABIERTO sEjeySintaxis CORCHETESCERRADO PUNTOCOMA sBarrasSintaxis 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 graficas.asignarNumeros(1, yleft, yright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sBarrasSintaxis",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sBarrasSintaxis ::= UNIR DOSPUNTO CORCHETESABIERTO sUnir CORCHETESCERRADO PUNTOCOMA sBarrasSintaxis 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 graficas.crearUniones(1, uleft, uright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sBarrasSintaxis",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sBarrasSintaxis ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sBarrasSintaxis",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sPie ::= PIE LLAVESABIERTO sPieSintaxis LLAVESCERRADO 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 graficas.agregarGrafica(2, pleft, pright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sPie",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sPieSintaxis ::= TITULO DOSPUNTO CADENAS PUNTOCOMA sPieSintaxis 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 graficas.ingresodeTextoGrafica(c, 2, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sPieSintaxis",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sPieSintaxis ::= TIPO DOSPUNTO sTipo PUNTOCOMA sPieSintaxis 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 graficas.ingresodeTextoGrafica(c, 3, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sPieSintaxis",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sPieSintaxis ::= ETIQUETAS DOSPUNTO CORCHETESABIERTO sEjexSintaxis CORCHETESCERRADO PUNTOCOMA sPieSintaxis 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		graficas.ingresoCadena(2,xleft,xright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sPieSintaxis",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sPieSintaxis ::= VALORES DOSPUNTO CORCHETESABIERTO sEjeySintaxis CORCHETESCERRADO PUNTOCOMA sPieSintaxis 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 graficas.asignarNumeros(2, yleft, yright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sPieSintaxis",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sPieSintaxis ::= TOTAL DOSPUNTO valorNumerico PUNTOCOMA sPieSintaxis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = e; graficas.ingresoTotal(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sPieSintaxis",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sPieSintaxis ::= UNIR DOSPUNTO CORCHETESABIERTO sUnir CORCHETESCERRADO PUNTOCOMA sPieSintaxis 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 graficas.crearUniones(2, uleft, uright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sPieSintaxis",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sPieSintaxis ::= EXTRA DOSPUNTO CADENAS PUNTOCOMA sPieSintaxis 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 graficas.ingresodeTextoGrafica(c, 4, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sPieSintaxis",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sPieSintaxis ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sPieSintaxis",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sEjexSintaxis ::= CADENAS COMA sEjexSintaxis 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 graficas.agregarCadenas(cadena); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sEjexSintaxis",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sEjexSintaxis ::= CADENAS 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 graficas.agregarCadenas(cadena); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sEjexSintaxis",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sEjeySintaxis ::= valorNumerico COMA sEjeySintaxis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = e; graficas.agregarNumeros(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sEjeySintaxis",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sEjeySintaxis ::= valorNumerico 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; graficas.agregarNumeros(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sEjeySintaxis",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sUnir ::= LLAVESABIERTO valorNumerico COMA valorNumerico LLAVESCERRADO COMA sUnir 
            {
              Object RESULT =null;
		int entero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int entero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Double entero1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int entero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int entero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double entero2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		graficas.agregarEntero(entero1, entero2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sUnir",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sUnir ::= LLAVESABIERTO valorNumerico COMA valorNumerico LLAVESCERRADO 
            {
              Object RESULT =null;
		int entero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int entero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double entero1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int entero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int entero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double entero2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 graficas.agregarEntero(entero1, entero2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sUnir",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sTipo ::= CANTIDAD 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sTipo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sTipo ::= PORCENTAJE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sTipo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sTipoNumero ::= ENTEROS 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sTipoNumero",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sTipoNumero ::= DECIMAL 
            {
              Double RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = d;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sTipoNumero",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valorNumerico ::= sTipoNumero 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorNumerico",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valorNumerico ::= valorNumerico SUMA valorNumerico 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 + e2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorNumerico",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valorNumerico ::= valorNumerico RESTA valorNumerico 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 - e2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorNumerico",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valorNumerico ::= valorNumerico MULTIPLICACION valorNumerico 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 * e2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorNumerico",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valorNumerico ::= valorNumerico DIVISION valorNumerico 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 / e2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorNumerico",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valorNumerico ::= PARENTESISABIERTO valorNumerico PARENTESISCERRADO 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorNumerico",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sEjecutar ::= PARENTESISABIERTO CADENAS PARENTESISCERRADO PUNTOCOMA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		graficas.agregarEjecucion(c, cleft, cright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sEjecutar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
